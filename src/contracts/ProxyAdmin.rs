pub use proxy_admin::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod proxy_admin {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"contract ITransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"changeProxyAdmin\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"contract ITransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getProxyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"contract ITransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getProxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"renounceOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"contract ITransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"upgrade\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"contract ITransparentUpgradeableProxy\",\"name\":\"proxy\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"upgradeAndCall\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static PROXYADMIN_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid"));
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        26,
        51,
        97,
        0,
        31,
        86,
        91,
        97,
        0,
        111,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        131,
        22,
        129,
        23,
        132,
        85,
        96,
        64,
        81,
        145,
        144,
        146,
        22,
        146,
        131,
        145,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        145,
        144,
        163,
        80,
        80,
        86,
        91,
        97,
        6,
        154,
        128,
        97,
        0,
        126,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        123,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        150,
        35,
        96,
        157,
        17,
        97,
        0,
        78,
        87,
        128,
        99,
        150,
        35,
        96,
        157,
        20,
        97,
        1,
        17,
        87,
        128,
        99,
        153,
        168,
        142,
        196,
        20,
        97,
        1,
        36,
        87,
        128,
        99,
        242,
        253,
        227,
        139,
        20,
        97,
        1,
        68,
        87,
        128,
        99,
        243,
        183,
        222,
        173,
        20,
        97,
        1,
        100,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        32,
        78,
        28,
        122,
        20,
        97,
        0,
        128,
        87,
        128,
        99,
        113,
        80,
        24,
        166,
        20,
        97,
        0,
        188,
        87,
        128,
        99,
        126,
        255,
        39,
        94,
        20,
        97,
        0,
        211,
        87,
        128,
        99,
        141,
        165,
        203,
        91,
        20,
        97,
        0,
        243,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        52,
        128,
        21,
        97,
        0,
        140,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        160,
        97,
        0,
        155,
        54,
        96,
        4,
        97,
        4,
        153,
        86,
        91,
        97,
        1,
        132,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        52,
        128,
        21,
        97,
        0,
        200,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        209,
        97,
        2,
        21,
        86,
        91,
        0,
        91,
        52,
        128,
        21,
        97,
        0,
        223,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        209,
        97,
        0,
        238,
        54,
        96,
        4,
        97,
        4,
        189,
        86,
        91,
        97,
        2,
        41,
        86,
        91,
        52,
        128,
        21,
        97,
        0,
        255,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        0,
        160,
        86,
        91,
        97,
        0,
        209,
        97,
        1,
        31,
        54,
        96,
        4,
        97,
        5,
        12,
        86,
        91,
        97,
        2,
        145,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        48,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        209,
        97,
        1,
        63,
        54,
        96,
        4,
        97,
        4,
        189,
        86,
        91,
        97,
        3,
        0,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        80,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        209,
        97,
        1,
        95,
        54,
        96,
        4,
        97,
        4,
        153,
        86,
        91,
        97,
        3,
        54,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        112,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        160,
        97,
        1,
        127,
        54,
        96,
        4,
        97,
        4,
        153,
        86,
        91,
        97,
        3,
        180,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        64,
        81,
        97,
        1,
        170,
        144,
        99,
        92,
        96,
        218,
        27,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        144,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        90,
        250,
        145,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        1,
        229,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        1,
        234,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        145,
        80,
        145,
        80,
        129,
        97,
        1,
        249,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        128,
        96,
        32,
        1,
        144,
        81,
        129,
        1,
        144,
        97,
        2,
        13,
        145,
        144,
        97,
        5,
        226,
        86,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        2,
        29,
        97,
        3,
        218,
        86,
        91,
        97,
        2,
        39,
        96,
        0,
        97,
        4,
        52,
        86,
        91,
        86,
        91,
        97,
        2,
        49,
        97,
        3,
        218,
        86,
        91,
        96,
        64,
        81,
        99,
        8,
        242,
        131,
        151,
        96,
        228,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        131,
        22,
        144,
        99,
        143,
        40,
        57,
        112,
        144,
        96,
        36,
        1,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        128,
        59,
        21,
        128,
        21,
        97,
        2,
        117,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        90,
        241,
        21,
        128,
        21,
        97,
        2,
        137,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        2,
        153,
        97,
        3,
        218,
        86,
        91,
        96,
        64,
        81,
        99,
        39,
        143,
        121,
        67,
        96,
        225,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        144,
        99,
        79,
        30,
        242,
        134,
        144,
        52,
        144,
        97,
        2,
        201,
        144,
        134,
        144,
        134,
        144,
        96,
        4,
        1,
        97,
        5,
        255,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        136,
        128,
        59,
        21,
        128,
        21,
        97,
        2,
        226,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        90,
        241,
        21,
        128,
        21,
        97,
        2,
        246,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        3,
        8,
        97,
        3,
        218,
        86,
        91,
        96,
        64,
        81,
        99,
        27,
        44,
        231,
        243,
        96,
        225,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        131,
        22,
        144,
        99,
        54,
        89,
        207,
        230,
        144,
        96,
        36,
        1,
        97,
        2,
        91,
        86,
        91,
        97,
        3,
        62,
        97,
        3,
        218,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        97,
        3,
        168,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        38,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        110,
        101,
        119,
        32,
        111,
        119,
        110,
        101,
        114,
        32,
        105,
        115,
        32,
        116,
        104,
        101,
        32,
        122,
        101,
        114,
        111,
        32,
        97,
        96,
        68,
        130,
        1,
        82,
        101,
        100,
        100,
        114,
        101,
        115,
        115,
        96,
        208,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        3,
        177,
        129,
        97,
        4,
        52,
        86,
        91,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        64,
        81,
        97,
        1,
        170,
        144,
        99,
        3,
        225,
        70,
        145,
        96,
        230,
        27,
        129,
        82,
        96,
        4,
        1,
        144,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        2,
        39,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        129,
        144,
        82,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        99,
        97,
        108,
        108,
        101,
        114,
        32,
        105,
        115,
        32,
        110,
        111,
        116,
        32,
        116,
        104,
        101,
        32,
        111,
        119,
        110,
        101,
        114,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        159,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        131,
        22,
        129,
        23,
        132,
        85,
        96,
        64,
        81,
        145,
        144,
        146,
        22,
        146,
        131,
        145,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        145,
        144,
        163,
        80,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        3,
        177,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        4,
        171,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        97,
        4,
        182,
        129,
        97,
        4,
        132,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        4,
        208,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        97,
        4,
        219,
        129,
        97,
        4,
        132,
        86,
        91,
        145,
        80,
        96,
        32,
        131,
        1,
        53,
        97,
        4,
        235,
        129,
        97,
        4,
        132,
        86,
        91,
        128,
        145,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        128,
        96,
        0,
        96,
        96,
        132,
        134,
        3,
        18,
        21,
        97,
        5,
        33,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        53,
        97,
        5,
        44,
        129,
        97,
        4,
        132,
        86,
        91,
        146,
        80,
        96,
        32,
        132,
        1,
        53,
        97,
        5,
        60,
        129,
        97,
        4,
        132,
        86,
        91,
        145,
        80,
        96,
        64,
        132,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        5,
        89,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        134,
        1,
        145,
        80,
        134,
        96,
        31,
        131,
        1,
        18,
        97,
        5,
        109,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        5,
        127,
        87,
        97,
        5,
        127,
        97,
        4,
        246,
        86,
        91,
        96,
        64,
        81,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        144,
        129,
        22,
        96,
        63,
        1,
        22,
        129,
        1,
        144,
        131,
        130,
        17,
        129,
        131,
        16,
        23,
        21,
        97,
        5,
        167,
        87,
        97,
        5,
        167,
        97,
        4,
        246,
        86,
        91,
        129,
        96,
        64,
        82,
        130,
        129,
        82,
        137,
        96,
        32,
        132,
        135,
        1,
        1,
        17,
        21,
        97,
        5,
        192,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        96,
        32,
        134,
        1,
        96,
        32,
        131,
        1,
        55,
        96,
        0,
        96,
        32,
        132,
        131,
        1,
        1,
        82,
        128,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        146,
        80,
        146,
        80,
        146,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        244,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        97,
        4,
        182,
        129,
        97,
        4,
        132,
        86,
        91,
        96,
        1,
        128,
        96,
        160,
        27,
        3,
        131,
        22,
        129,
        82,
        96,
        0,
        96,
        32,
        96,
        64,
        129,
        132,
        1,
        82,
        131,
        81,
        128,
        96,
        64,
        133,
        1,
        82,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        6,
        59,
        87,
        133,
        129,
        1,
        131,
        1,
        81,
        133,
        130,
        1,
        96,
        96,
        1,
        82,
        130,
        1,
        97,
        6,
        31,
        86,
        91,
        129,
        129,
        17,
        21,
        97,
        6,
        77,
        87,
        96,
        0,
        96,
        96,
        131,
        135,
        1,
        1,
        82,
        91,
        80,
        96,
        31,
        1,
        96,
        31,
        25,
        22,
        146,
        144,
        146,
        1,
        96,
        96,
        1,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        186,
        96,
        156,
        220,
        26,
        203,
        75,
        49,
        137,
        58,
        136,
        131,
        12,
        181,
        31,
        87,
        225,
        220,
        50,
        35,
        101,
        174,
        81,
        5,
        197,
        113,
        13,
        7,
        227,
        186,
        5,
        172,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        13,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static PROXYADMIN_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        123,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        150,
        35,
        96,
        157,
        17,
        97,
        0,
        78,
        87,
        128,
        99,
        150,
        35,
        96,
        157,
        20,
        97,
        1,
        17,
        87,
        128,
        99,
        153,
        168,
        142,
        196,
        20,
        97,
        1,
        36,
        87,
        128,
        99,
        242,
        253,
        227,
        139,
        20,
        97,
        1,
        68,
        87,
        128,
        99,
        243,
        183,
        222,
        173,
        20,
        97,
        1,
        100,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        32,
        78,
        28,
        122,
        20,
        97,
        0,
        128,
        87,
        128,
        99,
        113,
        80,
        24,
        166,
        20,
        97,
        0,
        188,
        87,
        128,
        99,
        126,
        255,
        39,
        94,
        20,
        97,
        0,
        211,
        87,
        128,
        99,
        141,
        165,
        203,
        91,
        20,
        97,
        0,
        243,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        52,
        128,
        21,
        97,
        0,
        140,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        160,
        97,
        0,
        155,
        54,
        96,
        4,
        97,
        4,
        153,
        86,
        91,
        97,
        1,
        132,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        52,
        128,
        21,
        97,
        0,
        200,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        209,
        97,
        2,
        21,
        86,
        91,
        0,
        91,
        52,
        128,
        21,
        97,
        0,
        223,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        209,
        97,
        0,
        238,
        54,
        96,
        4,
        97,
        4,
        189,
        86,
        91,
        97,
        2,
        41,
        86,
        91,
        52,
        128,
        21,
        97,
        0,
        255,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        0,
        160,
        86,
        91,
        97,
        0,
        209,
        97,
        1,
        31,
        54,
        96,
        4,
        97,
        5,
        12,
        86,
        91,
        97,
        2,
        145,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        48,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        209,
        97,
        1,
        63,
        54,
        96,
        4,
        97,
        4,
        189,
        86,
        91,
        97,
        3,
        0,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        80,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        209,
        97,
        1,
        95,
        54,
        96,
        4,
        97,
        4,
        153,
        86,
        91,
        97,
        3,
        54,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        112,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        160,
        97,
        1,
        127,
        54,
        96,
        4,
        97,
        4,
        153,
        86,
        91,
        97,
        3,
        180,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        64,
        81,
        97,
        1,
        170,
        144,
        99,
        92,
        96,
        218,
        27,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        144,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        90,
        250,
        145,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        1,
        229,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        1,
        234,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        145,
        80,
        145,
        80,
        129,
        97,
        1,
        249,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        128,
        96,
        32,
        1,
        144,
        81,
        129,
        1,
        144,
        97,
        2,
        13,
        145,
        144,
        97,
        5,
        226,
        86,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        2,
        29,
        97,
        3,
        218,
        86,
        91,
        97,
        2,
        39,
        96,
        0,
        97,
        4,
        52,
        86,
        91,
        86,
        91,
        97,
        2,
        49,
        97,
        3,
        218,
        86,
        91,
        96,
        64,
        81,
        99,
        8,
        242,
        131,
        151,
        96,
        228,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        131,
        22,
        144,
        99,
        143,
        40,
        57,
        112,
        144,
        96,
        36,
        1,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        128,
        59,
        21,
        128,
        21,
        97,
        2,
        117,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        90,
        241,
        21,
        128,
        21,
        97,
        2,
        137,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        2,
        153,
        97,
        3,
        218,
        86,
        91,
        96,
        64,
        81,
        99,
        39,
        143,
        121,
        67,
        96,
        225,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        144,
        99,
        79,
        30,
        242,
        134,
        144,
        52,
        144,
        97,
        2,
        201,
        144,
        134,
        144,
        134,
        144,
        96,
        4,
        1,
        97,
        5,
        255,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        136,
        128,
        59,
        21,
        128,
        21,
        97,
        2,
        226,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        90,
        241,
        21,
        128,
        21,
        97,
        2,
        246,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        3,
        8,
        97,
        3,
        218,
        86,
        91,
        96,
        64,
        81,
        99,
        27,
        44,
        231,
        243,
        96,
        225,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        131,
        22,
        144,
        99,
        54,
        89,
        207,
        230,
        144,
        96,
        36,
        1,
        97,
        2,
        91,
        86,
        91,
        97,
        3,
        62,
        97,
        3,
        218,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        97,
        3,
        168,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        38,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        110,
        101,
        119,
        32,
        111,
        119,
        110,
        101,
        114,
        32,
        105,
        115,
        32,
        116,
        104,
        101,
        32,
        122,
        101,
        114,
        111,
        32,
        97,
        96,
        68,
        130,
        1,
        82,
        101,
        100,
        100,
        114,
        101,
        115,
        115,
        96,
        208,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        3,
        177,
        129,
        97,
        4,
        52,
        86,
        91,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        64,
        81,
        97,
        1,
        170,
        144,
        99,
        3,
        225,
        70,
        145,
        96,
        230,
        27,
        129,
        82,
        96,
        4,
        1,
        144,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        2,
        39,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        129,
        144,
        82,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        99,
        97,
        108,
        108,
        101,
        114,
        32,
        105,
        115,
        32,
        110,
        111,
        116,
        32,
        116,
        104,
        101,
        32,
        111,
        119,
        110,
        101,
        114,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        159,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        131,
        22,
        129,
        23,
        132,
        85,
        96,
        64,
        81,
        145,
        144,
        146,
        22,
        146,
        131,
        145,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        145,
        144,
        163,
        80,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        3,
        177,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        4,
        171,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        97,
        4,
        182,
        129,
        97,
        4,
        132,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        4,
        208,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        97,
        4,
        219,
        129,
        97,
        4,
        132,
        86,
        91,
        145,
        80,
        96,
        32,
        131,
        1,
        53,
        97,
        4,
        235,
        129,
        97,
        4,
        132,
        86,
        91,
        128,
        145,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        128,
        96,
        0,
        96,
        96,
        132,
        134,
        3,
        18,
        21,
        97,
        5,
        33,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        53,
        97,
        5,
        44,
        129,
        97,
        4,
        132,
        86,
        91,
        146,
        80,
        96,
        32,
        132,
        1,
        53,
        97,
        5,
        60,
        129,
        97,
        4,
        132,
        86,
        91,
        145,
        80,
        96,
        64,
        132,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        5,
        89,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        134,
        1,
        145,
        80,
        134,
        96,
        31,
        131,
        1,
        18,
        97,
        5,
        109,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        5,
        127,
        87,
        97,
        5,
        127,
        97,
        4,
        246,
        86,
        91,
        96,
        64,
        81,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        144,
        129,
        22,
        96,
        63,
        1,
        22,
        129,
        1,
        144,
        131,
        130,
        17,
        129,
        131,
        16,
        23,
        21,
        97,
        5,
        167,
        87,
        97,
        5,
        167,
        97,
        4,
        246,
        86,
        91,
        129,
        96,
        64,
        82,
        130,
        129,
        82,
        137,
        96,
        32,
        132,
        135,
        1,
        1,
        17,
        21,
        97,
        5,
        192,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        96,
        32,
        134,
        1,
        96,
        32,
        131,
        1,
        55,
        96,
        0,
        96,
        32,
        132,
        131,
        1,
        1,
        82,
        128,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        146,
        80,
        146,
        80,
        146,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        244,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        97,
        4,
        182,
        129,
        97,
        4,
        132,
        86,
        91,
        96,
        1,
        128,
        96,
        160,
        27,
        3,
        131,
        22,
        129,
        82,
        96,
        0,
        96,
        32,
        96,
        64,
        129,
        132,
        1,
        82,
        131,
        81,
        128,
        96,
        64,
        133,
        1,
        82,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        6,
        59,
        87,
        133,
        129,
        1,
        131,
        1,
        81,
        133,
        130,
        1,
        96,
        96,
        1,
        82,
        130,
        1,
        97,
        6,
        31,
        86,
        91,
        129,
        129,
        17,
        21,
        97,
        6,
        77,
        87,
        96,
        0,
        96,
        96,
        131,
        135,
        1,
        1,
        82,
        91,
        80,
        96,
        31,
        1,
        96,
        31,
        25,
        22,
        146,
        144,
        146,
        1,
        96,
        96,
        1,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        186,
        96,
        156,
        220,
        26,
        203,
        75,
        49,
        137,
        58,
        136,
        131,
        12,
        181,
        31,
        87,
        225,
        220,
        50,
        35,
        101,
        174,
        81,
        5,
        197,
        113,
        13,
        7,
        227,
        186,
        5,
        172,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        13,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static PROXYADMIN_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct ProxyAdmin<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for ProxyAdmin<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for ProxyAdmin<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for ProxyAdmin<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for ProxyAdmin<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(ProxyAdmin)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> ProxyAdmin<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    PROXYADMIN_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                PROXYADMIN_ABI.clone(),
                PROXYADMIN_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `changeProxyAdmin` (0x7eff275e) function
        pub fn change_proxy_admin(
            &self,
            proxy: ::ethers::core::types::Address,
            new_admin: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([126, 255, 39, 94], (proxy, new_admin))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getProxyAdmin` (0xf3b7dead) function
        pub fn get_proxy_admin(
            &self,
            proxy: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([243, 183, 222, 173], proxy)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getProxyImplementation` (0x204e1c7a) function
        pub fn get_proxy_implementation(
            &self,
            proxy: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([32, 78, 28, 122], proxy)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `owner` (0x8da5cb5b) function
        pub fn owner(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([141, 165, 203, 91], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `renounceOwnership` (0x715018a6) function
        pub fn renounce_ownership(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([113, 80, 24, 166], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `transferOwnership` (0xf2fde38b) function
        pub fn transfer_ownership(
            &self,
            new_owner: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([242, 253, 227, 139], new_owner)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `upgrade` (0x99a88ec4) function
        pub fn upgrade(
            &self,
            proxy: ::ethers::core::types::Address,
            implementation: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([153, 168, 142, 196], (proxy, implementation))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `upgradeAndCall` (0x9623609d) function
        pub fn upgrade_and_call(
            &self,
            proxy: ::ethers::core::types::Address,
            implementation: ::ethers::core::types::Address,
            data: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([150, 35, 96, 157], (proxy, implementation, data))
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `OwnershipTransferred` event
        pub fn ownership_transferred_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            OwnershipTransferredFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            OwnershipTransferredFilter,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for ProxyAdmin<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(
        name = "OwnershipTransferred",
        abi = "OwnershipTransferred(address,address)"
    )]
    pub struct OwnershipTransferredFilter {
        #[ethevent(indexed)]
        pub previous_owner: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub new_owner: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `changeProxyAdmin` function with signature `changeProxyAdmin(address,address)` and selector `0x7eff275e`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "changeProxyAdmin", abi = "changeProxyAdmin(address,address)")]
    pub struct ChangeProxyAdminCall {
        pub proxy: ::ethers::core::types::Address,
        pub new_admin: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `getProxyAdmin` function with signature `getProxyAdmin(address)` and selector `0xf3b7dead`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "getProxyAdmin", abi = "getProxyAdmin(address)")]
    pub struct GetProxyAdminCall {
        pub proxy: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `getProxyImplementation` function with signature `getProxyImplementation(address)` and selector `0x204e1c7a`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "getProxyImplementation", abi = "getProxyImplementation(address)")]
    pub struct GetProxyImplementationCall {
        pub proxy: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "owner", abi = "owner()")]
    pub struct OwnerCall;
    ///Container type for all input parameters for the `renounceOwnership` function with signature `renounceOwnership()` and selector `0x715018a6`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "renounceOwnership", abi = "renounceOwnership()")]
    pub struct RenounceOwnershipCall;
    ///Container type for all input parameters for the `transferOwnership` function with signature `transferOwnership(address)` and selector `0xf2fde38b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "transferOwnership", abi = "transferOwnership(address)")]
    pub struct TransferOwnershipCall {
        pub new_owner: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `upgrade` function with signature `upgrade(address,address)` and selector `0x99a88ec4`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "upgrade", abi = "upgrade(address,address)")]
    pub struct UpgradeCall {
        pub proxy: ::ethers::core::types::Address,
        pub implementation: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `upgradeAndCall` function with signature `upgradeAndCall(address,address,bytes)` and selector `0x9623609d`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "upgradeAndCall", abi = "upgradeAndCall(address,address,bytes)")]
    pub struct UpgradeAndCallCall {
        pub proxy: ::ethers::core::types::Address,
        pub implementation: ::ethers::core::types::Address,
        pub data: ::ethers::core::types::Bytes,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum ProxyAdminCalls {
        ChangeProxyAdmin(ChangeProxyAdminCall),
        GetProxyAdmin(GetProxyAdminCall),
        GetProxyImplementation(GetProxyImplementationCall),
        Owner(OwnerCall),
        RenounceOwnership(RenounceOwnershipCall),
        TransferOwnership(TransferOwnershipCall),
        Upgrade(UpgradeCall),
        UpgradeAndCall(UpgradeAndCallCall),
    }
    impl ::ethers::core::abi::AbiDecode for ProxyAdminCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <ChangeProxyAdminCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::ChangeProxyAdmin(decoded));
            }
            if let Ok(decoded)
                = <GetProxyAdminCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::GetProxyAdmin(decoded));
            }
            if let Ok(decoded)
                = <GetProxyImplementationCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::GetProxyImplementation(decoded));
            }
            if let Ok(decoded)
                = <OwnerCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Owner(decoded));
            }
            if let Ok(decoded)
                = <RenounceOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RenounceOwnership(decoded));
            }
            if let Ok(decoded)
                = <TransferOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::TransferOwnership(decoded));
            }
            if let Ok(decoded)
                = <UpgradeCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Upgrade(decoded));
            }
            if let Ok(decoded)
                = <UpgradeAndCallCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::UpgradeAndCall(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for ProxyAdminCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::ChangeProxyAdmin(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetProxyAdmin(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::GetProxyImplementation(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Owner(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::RenounceOwnership(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::TransferOwnership(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Upgrade(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::UpgradeAndCall(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for ProxyAdminCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::ChangeProxyAdmin(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetProxyAdmin(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetProxyImplementation(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Owner(element) => ::core::fmt::Display::fmt(element, f),
                Self::RenounceOwnership(element) => ::core::fmt::Display::fmt(element, f),
                Self::TransferOwnership(element) => ::core::fmt::Display::fmt(element, f),
                Self::Upgrade(element) => ::core::fmt::Display::fmt(element, f),
                Self::UpgradeAndCall(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<ChangeProxyAdminCall> for ProxyAdminCalls {
        fn from(value: ChangeProxyAdminCall) -> Self {
            Self::ChangeProxyAdmin(value)
        }
    }
    impl ::core::convert::From<GetProxyAdminCall> for ProxyAdminCalls {
        fn from(value: GetProxyAdminCall) -> Self {
            Self::GetProxyAdmin(value)
        }
    }
    impl ::core::convert::From<GetProxyImplementationCall> for ProxyAdminCalls {
        fn from(value: GetProxyImplementationCall) -> Self {
            Self::GetProxyImplementation(value)
        }
    }
    impl ::core::convert::From<OwnerCall> for ProxyAdminCalls {
        fn from(value: OwnerCall) -> Self {
            Self::Owner(value)
        }
    }
    impl ::core::convert::From<RenounceOwnershipCall> for ProxyAdminCalls {
        fn from(value: RenounceOwnershipCall) -> Self {
            Self::RenounceOwnership(value)
        }
    }
    impl ::core::convert::From<TransferOwnershipCall> for ProxyAdminCalls {
        fn from(value: TransferOwnershipCall) -> Self {
            Self::TransferOwnership(value)
        }
    }
    impl ::core::convert::From<UpgradeCall> for ProxyAdminCalls {
        fn from(value: UpgradeCall) -> Self {
            Self::Upgrade(value)
        }
    }
    impl ::core::convert::From<UpgradeAndCallCall> for ProxyAdminCalls {
        fn from(value: UpgradeAndCallCall) -> Self {
            Self::UpgradeAndCall(value)
        }
    }
    ///Container type for all return fields from the `getProxyAdmin` function with signature `getProxyAdmin(address)` and selector `0xf3b7dead`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct GetProxyAdminReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `getProxyImplementation` function with signature `getProxyImplementation(address)` and selector `0x204e1c7a`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct GetProxyImplementationReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct OwnerReturn(pub ::ethers::core::types::Address);
}
