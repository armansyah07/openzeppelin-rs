pub use refund_escrow::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod refund_escrow {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary_\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Deposited\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"type\":\"event\",\"name\":\"RefundsClosed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"type\":\"event\",\"name\":\"RefundsEnabled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Withdrawn\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"beneficiaryWithdraw\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"close\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"refundee\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"deposit\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"depositsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"enableRefunds\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"renounceOwnership\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum RefundEscrow.State\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"withdrawalAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static REFUNDESCROW_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid"));
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        160,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        97,
        11,
        34,
        56,
        3,
        128,
        97,
        11,
        34,
        131,
        57,
        129,
        1,
        96,
        64,
        129,
        144,
        82,
        97,
        0,
        47,
        145,
        97,
        1,
        19,
        86,
        91,
        97,
        0,
        56,
        51,
        97,
        0,
        195,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        97,
        0,
        168,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        45,
        96,
        36,
        130,
        1,
        82,
        127,
        82,
        101,
        102,
        117,
        110,
        100,
        69,
        115,
        99,
        114,
        111,
        119,
        58,
        32,
        98,
        101,
        110,
        101,
        102,
        105,
        99,
        105,
        97,
        114,
        121,
        32,
        105,
        115,
        32,
        116,
        104,
        101,
        96,
        68,
        130,
        1,
        82,
        108,
        32,
        122,
        101,
        114,
        111,
        32,
        97,
        100,
        100,
        114,
        101,
        115,
        115,
        96,
        152,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        128,
        82,
        96,
        2,
        128,
        84,
        96,
        255,
        25,
        22,
        144,
        85,
        97,
        1,
        67,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        131,
        22,
        129,
        23,
        132,
        85,
        96,
        64,
        81,
        145,
        144,
        146,
        22,
        146,
        131,
        145,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        145,
        144,
        163,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        1,
        37,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        1,
        60,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        128,
        81,
        97,
        9,
        190,
        97,
        1,
        100,
        96,
        0,
        57,
        96,
        0,
        129,
        129,
        96,
        187,
        1,
        82,
        97,
        5,
        27,
        1,
        82,
        97,
        9,
        190,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        167,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        141,
        165,
        203,
        91,
        17,
        97,
        0,
        100,
        87,
        128,
        99,
        141,
        165,
        203,
        91,
        20,
        97,
        1,
        137,
        87,
        128,
        99,
        154,
        246,
        84,
        154,
        20,
        97,
        1,
        167,
        87,
        128,
        99,
        193,
        157,
        147,
        251,
        20,
        97,
        1,
        188,
        87,
        128,
        99,
        227,
        169,
        219,
        26,
        20,
        97,
        1,
        220,
        87,
        128,
        99,
        242,
        253,
        227,
        139,
        20,
        97,
        2,
        32,
        87,
        128,
        99,
        243,
        64,
        250,
        1,
        20,
        97,
        2,
        64,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        56,
        175,
        62,
        237,
        20,
        97,
        0,
        172,
        87,
        128,
        99,
        67,
        215,
        38,
        214,
        20,
        97,
        0,
        248,
        87,
        128,
        99,
        81,
        207,
        248,
        217,
        20,
        97,
        1,
        15,
        87,
        128,
        99,
        104,
        92,
        161,
        148,
        20,
        97,
        1,
        47,
        87,
        128,
        99,
        113,
        80,
        24,
        166,
        20,
        97,
        1,
        95,
        87,
        128,
        99,
        140,
        82,
        220,
        65,
        20,
        97,
        1,
        116,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        52,
        128,
        21,
        97,
        0,
        184,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        52,
        128,
        21,
        97,
        1,
        4,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        13,
        97,
        2,
        83,
        86,
        91,
        0,
        91,
        52,
        128,
        21,
        97,
        1,
        27,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        13,
        97,
        1,
        42,
        54,
        96,
        4,
        97,
        9,
        0,
        86,
        91,
        97,
        3,
        15,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        59,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        79,
        97,
        1,
        74,
        54,
        96,
        4,
        97,
        9,
        0,
        86,
        91,
        97,
        3,
        140,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        239,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        107,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        13,
        97,
        3,
        174,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        128,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        13,
        97,
        3,
        194,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        149,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        0,
        219,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        179,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        13,
        97,
        4,
        131,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        200,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        2,
        84,
        96,
        255,
        22,
        96,
        64,
        81,
        97,
        0,
        239,
        145,
        144,
        97,
        9,
        58,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        232,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        2,
        18,
        97,
        1,
        247,
        54,
        96,
        4,
        97,
        9,
        0,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        144,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        239,
        86,
        91,
        52,
        128,
        21,
        97,
        2,
        44,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        13,
        97,
        2,
        59,
        54,
        96,
        4,
        97,
        9,
        0,
        86,
        91,
        97,
        5,
        65,
        86,
        91,
        97,
        1,
        13,
        97,
        2,
        78,
        54,
        96,
        4,
        97,
        9,
        0,
        86,
        91,
        97,
        5,
        183,
        86,
        91,
        97,
        2,
        91,
        97,
        6,
        58,
        86,
        91,
        96,
        0,
        96,
        2,
        84,
        96,
        255,
        22,
        96,
        2,
        129,
        17,
        21,
        97,
        2,
        116,
        87,
        97,
        2,
        116,
        97,
        9,
        36,
        86,
        91,
        20,
        97,
        2,
        216,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        41,
        96,
        36,
        130,
        1,
        82,
        127,
        82,
        101,
        102,
        117,
        110,
        100,
        69,
        115,
        99,
        114,
        111,
        119,
        58,
        32,
        99,
        97,
        110,
        32,
        111,
        110,
        108,
        121,
        32,
        99,
        108,
        111,
        115,
        101,
        32,
        119,
        104,
        105,
        96,
        68,
        130,
        1,
        82,
        104,
        108,
        101,
        32,
        97,
        99,
        116,
        105,
        118,
        101,
        96,
        184,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        2,
        128,
        84,
        96,
        255,
        25,
        22,
        129,
        23,
        144,
        85,
        96,
        64,
        81,
        127,
        8,
        134,
        114,
        195,
        166,
        227,
        66,
        247,
        205,
        148,
        166,
        91,
        166,
        59,
        121,
        223,
        36,
        168,
        151,
        57,
        39,
        180,
        208,
        93,
        128,
        60,
        68,
        187,
        247,
        135,
        209,
        47,
        144,
        96,
        0,
        144,
        161,
        86,
        91,
        97,
        3,
        24,
        129,
        97,
        3,
        140,
        86,
        91,
        97,
        3,
        128,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        51,
        96,
        36,
        130,
        1,
        82,
        127,
        67,
        111,
        110,
        100,
        105,
        116,
        105,
        111,
        110,
        97,
        108,
        69,
        115,
        99,
        114,
        111,
        119,
        58,
        32,
        112,
        97,
        121,
        101,
        101,
        32,
        105,
        115,
        32,
        110,
        111,
        116,
        32,
        96,
        68,
        130,
        1,
        82,
        114,
        97,
        108,
        108,
        111,
        119,
        101,
        100,
        32,
        116,
        111,
        32,
        119,
        105,
        116,
        104,
        100,
        114,
        97,
        119,
        96,
        104,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        2,
        207,
        86,
        91,
        97,
        3,
        137,
        129,
        97,
        6,
        148,
        86,
        91,
        80,
        86,
        91,
        96,
        0,
        96,
        1,
        96,
        2,
        84,
        96,
        255,
        22,
        96,
        2,
        129,
        17,
        21,
        97,
        3,
        167,
        87,
        97,
        3,
        167,
        97,
        9,
        36,
        86,
        91,
        20,
        146,
        145,
        80,
        80,
        86,
        91,
        97,
        3,
        182,
        97,
        6,
        58,
        86,
        91,
        97,
        3,
        192,
        96,
        0,
        97,
        7,
        11,
        86,
        91,
        86,
        91,
        97,
        3,
        202,
        97,
        6,
        58,
        86,
        91,
        96,
        0,
        96,
        2,
        84,
        96,
        255,
        22,
        96,
        2,
        129,
        17,
        21,
        97,
        3,
        227,
        87,
        97,
        3,
        227,
        97,
        9,
        36,
        86,
        91,
        20,
        97,
        4,
        75,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        50,
        96,
        36,
        130,
        1,
        82,
        127,
        82,
        101,
        102,
        117,
        110,
        100,
        69,
        115,
        99,
        114,
        111,
        119,
        58,
        32,
        99,
        97,
        110,
        32,
        111,
        110,
        108,
        121,
        32,
        101,
        110,
        97,
        98,
        108,
        101,
        32,
        114,
        101,
        96,
        68,
        130,
        1,
        82,
        113,
        102,
        117,
        110,
        100,
        115,
        32,
        119,
        104,
        105,
        108,
        101,
        32,
        97,
        99,
        116,
        105,
        118,
        101,
        96,
        112,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        2,
        207,
        86,
        91,
        96,
        2,
        128,
        84,
        96,
        255,
        25,
        22,
        96,
        1,
        23,
        144,
        85,
        96,
        64,
        81,
        127,
        89,
        157,
        142,
        90,
        131,
        207,
        251,
        134,
        125,
        5,
        21,
        152,
        196,
        215,
        14,
        128,
        93,
        89,
        128,
        45,
        128,
        129,
        193,
        199,
        214,
        223,
        252,
        91,
        106,
        202,
        43,
        137,
        144,
        96,
        0,
        144,
        161,
        86,
        91,
        96,
        2,
        128,
        84,
        96,
        255,
        22,
        96,
        2,
        129,
        17,
        21,
        97,
        4,
        155,
        87,
        97,
        4,
        155,
        97,
        9,
        36,
        86,
        91,
        20,
        97,
        5,
        14,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        56,
        96,
        36,
        130,
        1,
        82,
        127,
        82,
        101,
        102,
        117,
        110,
        100,
        69,
        115,
        99,
        114,
        111,
        119,
        58,
        32,
        98,
        101,
        110,
        101,
        102,
        105,
        99,
        105,
        97,
        114,
        121,
        32,
        99,
        97,
        110,
        32,
        111,
        110,
        96,
        68,
        130,
        1,
        82,
        127,
        108,
        121,
        32,
        119,
        105,
        116,
        104,
        100,
        114,
        97,
        119,
        32,
        119,
        104,
        105,
        108,
        101,
        32,
        99,
        108,
        111,
        115,
        101,
        100,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        2,
        207,
        86,
        91,
        97,
        3,
        192,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        71,
        97,
        7,
        91,
        86,
        91,
        97,
        5,
        73,
        97,
        6,
        58,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        97,
        5,
        174,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        38,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        110,
        101,
        119,
        32,
        111,
        119,
        110,
        101,
        114,
        32,
        105,
        115,
        32,
        116,
        104,
        101,
        32,
        122,
        101,
        114,
        111,
        32,
        97,
        96,
        68,
        130,
        1,
        82,
        101,
        100,
        100,
        114,
        101,
        115,
        115,
        96,
        208,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        2,
        207,
        86,
        91,
        97,
        3,
        137,
        129,
        97,
        7,
        11,
        86,
        91,
        96,
        0,
        96,
        2,
        84,
        96,
        255,
        22,
        96,
        2,
        129,
        17,
        21,
        97,
        5,
        208,
        87,
        97,
        5,
        208,
        97,
        9,
        36,
        86,
        91,
        20,
        97,
        6,
        49,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        43,
        96,
        36,
        130,
        1,
        82,
        127,
        82,
        101,
        102,
        117,
        110,
        100,
        69,
        115,
        99,
        114,
        111,
        119,
        58,
        32,
        99,
        97,
        110,
        32,
        111,
        110,
        108,
        121,
        32,
        100,
        101,
        112,
        111,
        115,
        105,
        116,
        32,
        119,
        96,
        68,
        130,
        1,
        82,
        106,
        104,
        105,
        108,
        101,
        32,
        97,
        99,
        116,
        105,
        118,
        101,
        96,
        168,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        2,
        207,
        86,
        91,
        97,
        3,
        137,
        129,
        97,
        8,
        121,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        3,
        192,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        129,
        144,
        82,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        99,
        97,
        108,
        108,
        101,
        114,
        32,
        105,
        115,
        32,
        110,
        111,
        116,
        32,
        116,
        104,
        101,
        32,
        111,
        119,
        110,
        101,
        114,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        2,
        207,
        86,
        91,
        97,
        6,
        156,
        97,
        6,
        58,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        129,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        128,
        84,
        145,
        144,
        85,
        144,
        97,
        6,
        196,
        144,
        130,
        97,
        7,
        91,
        86,
        91,
        129,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        127,
        112,
        132,
        245,
        71,
        102,
        24,
        216,
        230,
        11,
        17,
        239,
        13,
        125,
        63,
        6,
        145,
        70,
        85,
        173,
        184,
        121,
        62,
        40,
        255,
        127,
        1,
        141,
        76,
        118,
        213,
        5,
        213,
        130,
        96,
        64,
        81,
        97,
        6,
        255,
        145,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        131,
        22,
        129,
        23,
        132,
        85,
        96,
        64,
        81,
        145,
        144,
        146,
        22,
        146,
        131,
        145,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        145,
        144,
        163,
        80,
        80,
        86,
        91,
        128,
        71,
        16,
        21,
        97,
        7,
        171,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        29,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        105,
        110,
        115,
        117,
        102,
        102,
        105,
        99,
        105,
        101,
        110,
        116,
        32,
        98,
        97,
        108,
        97,
        110,
        99,
        101,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        2,
        207,
        86,
        91,
        96,
        0,
        130,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        130,
        96,
        64,
        81,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        135,
        90,
        241,
        146,
        80,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        7,
        248,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        7,
        253,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        80,
        144,
        80,
        128,
        97,
        8,
        116,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        58,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        117,
        110,
        97,
        98,
        108,
        101,
        32,
        116,
        111,
        32,
        115,
        101,
        110,
        100,
        32,
        118,
        97,
        108,
        117,
        101,
        44,
        32,
        114,
        96,
        68,
        130,
        1,
        82,
        127,
        101,
        99,
        105,
        112,
        105,
        101,
        110,
        116,
        32,
        109,
        97,
        121,
        32,
        104,
        97,
        118,
        101,
        32,
        114,
        101,
        118,
        101,
        114,
        116,
        101,
        100,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        2,
        207,
        86,
        91,
        80,
        80,
        80,
        86,
        91,
        97,
        8,
        129,
        97,
        6,
        58,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        128,
        84,
        52,
        146,
        131,
        146,
        145,
        97,
        8,
        171,
        144,
        132,
        144,
        97,
        9,
        98,
        86,
        91,
        144,
        145,
        85,
        80,
        80,
        96,
        64,
        81,
        129,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        144,
        127,
        45,
        164,
        102,
        167,
        178,
        67,
        4,
        244,
        126,
        135,
        250,
        46,
        30,
        90,
        129,
        185,
        131,
        28,
        229,
        79,
        236,
        25,
        5,
        92,
        226,
        119,
        202,
        47,
        57,
        186,
        66,
        196,
        144,
        96,
        32,
        1,
        97,
        6,
        255,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        3,
        137,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        9,
        18,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        97,
        9,
        29,
        129,
        97,
        8,
        235,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        33,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        32,
        129,
        1,
        96,
        3,
        131,
        16,
        97,
        9,
        92,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        33,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        145,
        144,
        82,
        144,
        86,
        91,
        96,
        0,
        130,
        25,
        130,
        17,
        21,
        97,
        9,
        131,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        1,
        144,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        130,
        103,
        234,
        113,
        150,
        21,
        104,
        189,
        160,
        153,
        155,
        83,
        39,
        121,
        79,
        206,
        19,
        208,
        207,
        8,
        81,
        108,
        95,
        25,
        94,
        98,
        185,
        67,
        113,
        141,
        48,
        86,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        13,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static REFUNDESCROW_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        167,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        141,
        165,
        203,
        91,
        17,
        97,
        0,
        100,
        87,
        128,
        99,
        141,
        165,
        203,
        91,
        20,
        97,
        1,
        137,
        87,
        128,
        99,
        154,
        246,
        84,
        154,
        20,
        97,
        1,
        167,
        87,
        128,
        99,
        193,
        157,
        147,
        251,
        20,
        97,
        1,
        188,
        87,
        128,
        99,
        227,
        169,
        219,
        26,
        20,
        97,
        1,
        220,
        87,
        128,
        99,
        242,
        253,
        227,
        139,
        20,
        97,
        2,
        32,
        87,
        128,
        99,
        243,
        64,
        250,
        1,
        20,
        97,
        2,
        64,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        56,
        175,
        62,
        237,
        20,
        97,
        0,
        172,
        87,
        128,
        99,
        67,
        215,
        38,
        214,
        20,
        97,
        0,
        248,
        87,
        128,
        99,
        81,
        207,
        248,
        217,
        20,
        97,
        1,
        15,
        87,
        128,
        99,
        104,
        92,
        161,
        148,
        20,
        97,
        1,
        47,
        87,
        128,
        99,
        113,
        80,
        24,
        166,
        20,
        97,
        1,
        95,
        87,
        128,
        99,
        140,
        82,
        220,
        65,
        20,
        97,
        1,
        116,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        52,
        128,
        21,
        97,
        0,
        184,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        52,
        128,
        21,
        97,
        1,
        4,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        13,
        97,
        2,
        83,
        86,
        91,
        0,
        91,
        52,
        128,
        21,
        97,
        1,
        27,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        13,
        97,
        1,
        42,
        54,
        96,
        4,
        97,
        9,
        0,
        86,
        91,
        97,
        3,
        15,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        59,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        79,
        97,
        1,
        74,
        54,
        96,
        4,
        97,
        9,
        0,
        86,
        91,
        97,
        3,
        140,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        239,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        107,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        13,
        97,
        3,
        174,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        128,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        13,
        97,
        3,
        194,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        149,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        0,
        219,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        179,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        13,
        97,
        4,
        131,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        200,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        2,
        84,
        96,
        255,
        22,
        96,
        64,
        81,
        97,
        0,
        239,
        145,
        144,
        97,
        9,
        58,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        232,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        2,
        18,
        97,
        1,
        247,
        54,
        96,
        4,
        97,
        9,
        0,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        84,
        144,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        239,
        86,
        91,
        52,
        128,
        21,
        97,
        2,
        44,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        13,
        97,
        2,
        59,
        54,
        96,
        4,
        97,
        9,
        0,
        86,
        91,
        97,
        5,
        65,
        86,
        91,
        97,
        1,
        13,
        97,
        2,
        78,
        54,
        96,
        4,
        97,
        9,
        0,
        86,
        91,
        97,
        5,
        183,
        86,
        91,
        97,
        2,
        91,
        97,
        6,
        58,
        86,
        91,
        96,
        0,
        96,
        2,
        84,
        96,
        255,
        22,
        96,
        2,
        129,
        17,
        21,
        97,
        2,
        116,
        87,
        97,
        2,
        116,
        97,
        9,
        36,
        86,
        91,
        20,
        97,
        2,
        216,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        41,
        96,
        36,
        130,
        1,
        82,
        127,
        82,
        101,
        102,
        117,
        110,
        100,
        69,
        115,
        99,
        114,
        111,
        119,
        58,
        32,
        99,
        97,
        110,
        32,
        111,
        110,
        108,
        121,
        32,
        99,
        108,
        111,
        115,
        101,
        32,
        119,
        104,
        105,
        96,
        68,
        130,
        1,
        82,
        104,
        108,
        101,
        32,
        97,
        99,
        116,
        105,
        118,
        101,
        96,
        184,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        2,
        128,
        84,
        96,
        255,
        25,
        22,
        129,
        23,
        144,
        85,
        96,
        64,
        81,
        127,
        8,
        134,
        114,
        195,
        166,
        227,
        66,
        247,
        205,
        148,
        166,
        91,
        166,
        59,
        121,
        223,
        36,
        168,
        151,
        57,
        39,
        180,
        208,
        93,
        128,
        60,
        68,
        187,
        247,
        135,
        209,
        47,
        144,
        96,
        0,
        144,
        161,
        86,
        91,
        97,
        3,
        24,
        129,
        97,
        3,
        140,
        86,
        91,
        97,
        3,
        128,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        51,
        96,
        36,
        130,
        1,
        82,
        127,
        67,
        111,
        110,
        100,
        105,
        116,
        105,
        111,
        110,
        97,
        108,
        69,
        115,
        99,
        114,
        111,
        119,
        58,
        32,
        112,
        97,
        121,
        101,
        101,
        32,
        105,
        115,
        32,
        110,
        111,
        116,
        32,
        96,
        68,
        130,
        1,
        82,
        114,
        97,
        108,
        108,
        111,
        119,
        101,
        100,
        32,
        116,
        111,
        32,
        119,
        105,
        116,
        104,
        100,
        114,
        97,
        119,
        96,
        104,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        2,
        207,
        86,
        91,
        97,
        3,
        137,
        129,
        97,
        6,
        148,
        86,
        91,
        80,
        86,
        91,
        96,
        0,
        96,
        1,
        96,
        2,
        84,
        96,
        255,
        22,
        96,
        2,
        129,
        17,
        21,
        97,
        3,
        167,
        87,
        97,
        3,
        167,
        97,
        9,
        36,
        86,
        91,
        20,
        146,
        145,
        80,
        80,
        86,
        91,
        97,
        3,
        182,
        97,
        6,
        58,
        86,
        91,
        97,
        3,
        192,
        96,
        0,
        97,
        7,
        11,
        86,
        91,
        86,
        91,
        97,
        3,
        202,
        97,
        6,
        58,
        86,
        91,
        96,
        0,
        96,
        2,
        84,
        96,
        255,
        22,
        96,
        2,
        129,
        17,
        21,
        97,
        3,
        227,
        87,
        97,
        3,
        227,
        97,
        9,
        36,
        86,
        91,
        20,
        97,
        4,
        75,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        50,
        96,
        36,
        130,
        1,
        82,
        127,
        82,
        101,
        102,
        117,
        110,
        100,
        69,
        115,
        99,
        114,
        111,
        119,
        58,
        32,
        99,
        97,
        110,
        32,
        111,
        110,
        108,
        121,
        32,
        101,
        110,
        97,
        98,
        108,
        101,
        32,
        114,
        101,
        96,
        68,
        130,
        1,
        82,
        113,
        102,
        117,
        110,
        100,
        115,
        32,
        119,
        104,
        105,
        108,
        101,
        32,
        97,
        99,
        116,
        105,
        118,
        101,
        96,
        112,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        2,
        207,
        86,
        91,
        96,
        2,
        128,
        84,
        96,
        255,
        25,
        22,
        96,
        1,
        23,
        144,
        85,
        96,
        64,
        81,
        127,
        89,
        157,
        142,
        90,
        131,
        207,
        251,
        134,
        125,
        5,
        21,
        152,
        196,
        215,
        14,
        128,
        93,
        89,
        128,
        45,
        128,
        129,
        193,
        199,
        214,
        223,
        252,
        91,
        106,
        202,
        43,
        137,
        144,
        96,
        0,
        144,
        161,
        86,
        91,
        96,
        2,
        128,
        84,
        96,
        255,
        22,
        96,
        2,
        129,
        17,
        21,
        97,
        4,
        155,
        87,
        97,
        4,
        155,
        97,
        9,
        36,
        86,
        91,
        20,
        97,
        5,
        14,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        56,
        96,
        36,
        130,
        1,
        82,
        127,
        82,
        101,
        102,
        117,
        110,
        100,
        69,
        115,
        99,
        114,
        111,
        119,
        58,
        32,
        98,
        101,
        110,
        101,
        102,
        105,
        99,
        105,
        97,
        114,
        121,
        32,
        99,
        97,
        110,
        32,
        111,
        110,
        96,
        68,
        130,
        1,
        82,
        127,
        108,
        121,
        32,
        119,
        105,
        116,
        104,
        100,
        114,
        97,
        119,
        32,
        119,
        104,
        105,
        108,
        101,
        32,
        99,
        108,
        111,
        115,
        101,
        100,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        2,
        207,
        86,
        91,
        97,
        3,
        192,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        71,
        97,
        7,
        91,
        86,
        91,
        97,
        5,
        73,
        97,
        6,
        58,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        97,
        5,
        174,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        38,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        110,
        101,
        119,
        32,
        111,
        119,
        110,
        101,
        114,
        32,
        105,
        115,
        32,
        116,
        104,
        101,
        32,
        122,
        101,
        114,
        111,
        32,
        97,
        96,
        68,
        130,
        1,
        82,
        101,
        100,
        100,
        114,
        101,
        115,
        115,
        96,
        208,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        2,
        207,
        86,
        91,
        97,
        3,
        137,
        129,
        97,
        7,
        11,
        86,
        91,
        96,
        0,
        96,
        2,
        84,
        96,
        255,
        22,
        96,
        2,
        129,
        17,
        21,
        97,
        5,
        208,
        87,
        97,
        5,
        208,
        97,
        9,
        36,
        86,
        91,
        20,
        97,
        6,
        49,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        43,
        96,
        36,
        130,
        1,
        82,
        127,
        82,
        101,
        102,
        117,
        110,
        100,
        69,
        115,
        99,
        114,
        111,
        119,
        58,
        32,
        99,
        97,
        110,
        32,
        111,
        110,
        108,
        121,
        32,
        100,
        101,
        112,
        111,
        115,
        105,
        116,
        32,
        119,
        96,
        68,
        130,
        1,
        82,
        106,
        104,
        105,
        108,
        101,
        32,
        97,
        99,
        116,
        105,
        118,
        101,
        96,
        168,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        2,
        207,
        86,
        91,
        97,
        3,
        137,
        129,
        97,
        8,
        121,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        3,
        192,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        129,
        144,
        82,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        99,
        97,
        108,
        108,
        101,
        114,
        32,
        105,
        115,
        32,
        110,
        111,
        116,
        32,
        116,
        104,
        101,
        32,
        111,
        119,
        110,
        101,
        114,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        2,
        207,
        86,
        91,
        97,
        6,
        156,
        97,
        6,
        58,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        129,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        128,
        84,
        145,
        144,
        85,
        144,
        97,
        6,
        196,
        144,
        130,
        97,
        7,
        91,
        86,
        91,
        129,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        127,
        112,
        132,
        245,
        71,
        102,
        24,
        216,
        230,
        11,
        17,
        239,
        13,
        125,
        63,
        6,
        145,
        70,
        85,
        173,
        184,
        121,
        62,
        40,
        255,
        127,
        1,
        141,
        76,
        118,
        213,
        5,
        213,
        130,
        96,
        64,
        81,
        97,
        6,
        255,
        145,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        131,
        22,
        129,
        23,
        132,
        85,
        96,
        64,
        81,
        145,
        144,
        146,
        22,
        146,
        131,
        145,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        145,
        144,
        163,
        80,
        80,
        86,
        91,
        128,
        71,
        16,
        21,
        97,
        7,
        171,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        29,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        105,
        110,
        115,
        117,
        102,
        102,
        105,
        99,
        105,
        101,
        110,
        116,
        32,
        98,
        97,
        108,
        97,
        110,
        99,
        101,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        2,
        207,
        86,
        91,
        96,
        0,
        130,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        130,
        96,
        64,
        81,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        135,
        90,
        241,
        146,
        80,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        7,
        248,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        7,
        253,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        80,
        144,
        80,
        128,
        97,
        8,
        116,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        58,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        117,
        110,
        97,
        98,
        108,
        101,
        32,
        116,
        111,
        32,
        115,
        101,
        110,
        100,
        32,
        118,
        97,
        108,
        117,
        101,
        44,
        32,
        114,
        96,
        68,
        130,
        1,
        82,
        127,
        101,
        99,
        105,
        112,
        105,
        101,
        110,
        116,
        32,
        109,
        97,
        121,
        32,
        104,
        97,
        118,
        101,
        32,
        114,
        101,
        118,
        101,
        114,
        116,
        101,
        100,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        2,
        207,
        86,
        91,
        80,
        80,
        80,
        86,
        91,
        97,
        8,
        129,
        97,
        6,
        58,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        128,
        84,
        52,
        146,
        131,
        146,
        145,
        97,
        8,
        171,
        144,
        132,
        144,
        97,
        9,
        98,
        86,
        91,
        144,
        145,
        85,
        80,
        80,
        96,
        64,
        81,
        129,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        144,
        127,
        45,
        164,
        102,
        167,
        178,
        67,
        4,
        244,
        126,
        135,
        250,
        46,
        30,
        90,
        129,
        185,
        131,
        28,
        229,
        79,
        236,
        25,
        5,
        92,
        226,
        119,
        202,
        47,
        57,
        186,
        66,
        196,
        144,
        96,
        32,
        1,
        97,
        6,
        255,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        3,
        137,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        9,
        18,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        97,
        9,
        29,
        129,
        97,
        8,
        235,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        33,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        32,
        129,
        1,
        96,
        3,
        131,
        16,
        97,
        9,
        92,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        33,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        145,
        144,
        82,
        144,
        86,
        91,
        96,
        0,
        130,
        25,
        130,
        17,
        21,
        97,
        9,
        131,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        1,
        144,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        130,
        103,
        234,
        113,
        150,
        21,
        104,
        189,
        160,
        153,
        155,
        83,
        39,
        121,
        79,
        206,
        19,
        208,
        207,
        8,
        81,
        108,
        95,
        25,
        94,
        98,
        185,
        67,
        113,
        141,
        48,
        86,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        13,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static REFUNDESCROW_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct RefundEscrow<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for RefundEscrow<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for RefundEscrow<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for RefundEscrow<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for RefundEscrow<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(RefundEscrow)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> RefundEscrow<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    REFUNDESCROW_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                REFUNDESCROW_ABI.clone(),
                REFUNDESCROW_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `beneficiary` (0x38af3eed) function
        pub fn beneficiary(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([56, 175, 62, 237], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `beneficiaryWithdraw` (0x9af6549a) function
        pub fn beneficiary_withdraw(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([154, 246, 84, 154], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `close` (0x43d726d6) function
        pub fn close(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([67, 215, 38, 214], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `deposit` (0xf340fa01) function
        pub fn deposit(
            &self,
            refundee: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([243, 64, 250, 1], refundee)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `depositsOf` (0xe3a9db1a) function
        pub fn deposits_of(
            &self,
            payee: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([227, 169, 219, 26], payee)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `enableRefunds` (0x8c52dc41) function
        pub fn enable_refunds(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([140, 82, 220, 65], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `owner` (0x8da5cb5b) function
        pub fn owner(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([141, 165, 203, 91], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `renounceOwnership` (0x715018a6) function
        pub fn renounce_ownership(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([113, 80, 24, 166], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `state` (0xc19d93fb) function
        pub fn state(&self) -> ::ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([193, 157, 147, 251], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `transferOwnership` (0xf2fde38b) function
        pub fn transfer_ownership(
            &self,
            new_owner: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([242, 253, 227, 139], new_owner)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `withdraw` (0x51cff8d9) function
        pub fn withdraw(
            &self,
            payee: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([81, 207, 248, 217], payee)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `withdrawalAllowed` (0x685ca194) function
        pub fn withdrawal_allowed(
            &self,
            p0: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([104, 92, 161, 148], p0)
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `Deposited` event
        pub fn deposited_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            DepositedFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `OwnershipTransferred` event
        pub fn ownership_transferred_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            OwnershipTransferredFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `RefundsClosed` event
        pub fn refunds_closed_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            RefundsClosedFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `RefundsEnabled` event
        pub fn refunds_enabled_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            RefundsEnabledFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `Withdrawn` event
        pub fn withdrawn_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            WithdrawnFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            RefundEscrowEvents,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for RefundEscrow<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "Deposited", abi = "Deposited(address,uint256)")]
    pub struct DepositedFilter {
        #[ethevent(indexed)]
        pub payee: ::ethers::core::types::Address,
        pub wei_amount: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(
        name = "OwnershipTransferred",
        abi = "OwnershipTransferred(address,address)"
    )]
    pub struct OwnershipTransferredFilter {
        #[ethevent(indexed)]
        pub previous_owner: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub new_owner: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "RefundsClosed", abi = "RefundsClosed()")]
    pub struct RefundsClosedFilter;
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "RefundsEnabled", abi = "RefundsEnabled()")]
    pub struct RefundsEnabledFilter;
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "Withdrawn", abi = "Withdrawn(address,uint256)")]
    pub struct WithdrawnFilter {
        #[ethevent(indexed)]
        pub payee: ::ethers::core::types::Address,
        pub wei_amount: ::ethers::core::types::U256,
    }
    ///Container type for all of the contract's events
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum RefundEscrowEvents {
        DepositedFilter(DepositedFilter),
        OwnershipTransferredFilter(OwnershipTransferredFilter),
        RefundsClosedFilter(RefundsClosedFilter),
        RefundsEnabledFilter(RefundsEnabledFilter),
        WithdrawnFilter(WithdrawnFilter),
    }
    impl ::ethers::contract::EthLogDecode for RefundEscrowEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::Error> {
            if let Ok(decoded) = DepositedFilter::decode_log(log) {
                return Ok(RefundEscrowEvents::DepositedFilter(decoded));
            }
            if let Ok(decoded) = OwnershipTransferredFilter::decode_log(log) {
                return Ok(RefundEscrowEvents::OwnershipTransferredFilter(decoded));
            }
            if let Ok(decoded) = RefundsClosedFilter::decode_log(log) {
                return Ok(RefundEscrowEvents::RefundsClosedFilter(decoded));
            }
            if let Ok(decoded) = RefundsEnabledFilter::decode_log(log) {
                return Ok(RefundEscrowEvents::RefundsEnabledFilter(decoded));
            }
            if let Ok(decoded) = WithdrawnFilter::decode_log(log) {
                return Ok(RefundEscrowEvents::WithdrawnFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::core::fmt::Display for RefundEscrowEvents {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::DepositedFilter(element) => ::core::fmt::Display::fmt(element, f),
                Self::OwnershipTransferredFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::RefundsClosedFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::RefundsEnabledFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::WithdrawnFilter(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<DepositedFilter> for RefundEscrowEvents {
        fn from(value: DepositedFilter) -> Self {
            Self::DepositedFilter(value)
        }
    }
    impl ::core::convert::From<OwnershipTransferredFilter> for RefundEscrowEvents {
        fn from(value: OwnershipTransferredFilter) -> Self {
            Self::OwnershipTransferredFilter(value)
        }
    }
    impl ::core::convert::From<RefundsClosedFilter> for RefundEscrowEvents {
        fn from(value: RefundsClosedFilter) -> Self {
            Self::RefundsClosedFilter(value)
        }
    }
    impl ::core::convert::From<RefundsEnabledFilter> for RefundEscrowEvents {
        fn from(value: RefundsEnabledFilter) -> Self {
            Self::RefundsEnabledFilter(value)
        }
    }
    impl ::core::convert::From<WithdrawnFilter> for RefundEscrowEvents {
        fn from(value: WithdrawnFilter) -> Self {
            Self::WithdrawnFilter(value)
        }
    }
    ///Container type for all input parameters for the `beneficiary` function with signature `beneficiary()` and selector `0x38af3eed`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "beneficiary", abi = "beneficiary()")]
    pub struct BeneficiaryCall;
    ///Container type for all input parameters for the `beneficiaryWithdraw` function with signature `beneficiaryWithdraw()` and selector `0x9af6549a`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "beneficiaryWithdraw", abi = "beneficiaryWithdraw()")]
    pub struct BeneficiaryWithdrawCall;
    ///Container type for all input parameters for the `close` function with signature `close()` and selector `0x43d726d6`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "close", abi = "close()")]
    pub struct CloseCall;
    ///Container type for all input parameters for the `deposit` function with signature `deposit(address)` and selector `0xf340fa01`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "deposit", abi = "deposit(address)")]
    pub struct DepositCall {
        pub refundee: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `depositsOf` function with signature `depositsOf(address)` and selector `0xe3a9db1a`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "depositsOf", abi = "depositsOf(address)")]
    pub struct DepositsOfCall {
        pub payee: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `enableRefunds` function with signature `enableRefunds()` and selector `0x8c52dc41`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "enableRefunds", abi = "enableRefunds()")]
    pub struct EnableRefundsCall;
    ///Container type for all input parameters for the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "owner", abi = "owner()")]
    pub struct OwnerCall;
    ///Container type for all input parameters for the `renounceOwnership` function with signature `renounceOwnership()` and selector `0x715018a6`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "renounceOwnership", abi = "renounceOwnership()")]
    pub struct RenounceOwnershipCall;
    ///Container type for all input parameters for the `state` function with signature `state()` and selector `0xc19d93fb`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "state", abi = "state()")]
    pub struct StateCall;
    ///Container type for all input parameters for the `transferOwnership` function with signature `transferOwnership(address)` and selector `0xf2fde38b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "transferOwnership", abi = "transferOwnership(address)")]
    pub struct TransferOwnershipCall {
        pub new_owner: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `withdraw` function with signature `withdraw(address)` and selector `0x51cff8d9`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "withdraw", abi = "withdraw(address)")]
    pub struct WithdrawCall {
        pub payee: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `withdrawalAllowed` function with signature `withdrawalAllowed(address)` and selector `0x685ca194`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "withdrawalAllowed", abi = "withdrawalAllowed(address)")]
    pub struct WithdrawalAllowedCall(pub ::ethers::core::types::Address);
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum RefundEscrowCalls {
        Beneficiary(BeneficiaryCall),
        BeneficiaryWithdraw(BeneficiaryWithdrawCall),
        Close(CloseCall),
        Deposit(DepositCall),
        DepositsOf(DepositsOfCall),
        EnableRefunds(EnableRefundsCall),
        Owner(OwnerCall),
        RenounceOwnership(RenounceOwnershipCall),
        State(StateCall),
        TransferOwnership(TransferOwnershipCall),
        Withdraw(WithdrawCall),
        WithdrawalAllowed(WithdrawalAllowedCall),
    }
    impl ::ethers::core::abi::AbiDecode for RefundEscrowCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <BeneficiaryCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Beneficiary(decoded));
            }
            if let Ok(decoded)
                = <BeneficiaryWithdrawCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::BeneficiaryWithdraw(decoded));
            }
            if let Ok(decoded)
                = <CloseCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Close(decoded));
            }
            if let Ok(decoded)
                = <DepositCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Deposit(decoded));
            }
            if let Ok(decoded)
                = <DepositsOfCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::DepositsOf(decoded));
            }
            if let Ok(decoded)
                = <EnableRefundsCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::EnableRefunds(decoded));
            }
            if let Ok(decoded)
                = <OwnerCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Owner(decoded));
            }
            if let Ok(decoded)
                = <RenounceOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RenounceOwnership(decoded));
            }
            if let Ok(decoded)
                = <StateCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::State(decoded));
            }
            if let Ok(decoded)
                = <TransferOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::TransferOwnership(decoded));
            }
            if let Ok(decoded)
                = <WithdrawCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Withdraw(decoded));
            }
            if let Ok(decoded)
                = <WithdrawalAllowedCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::WithdrawalAllowed(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for RefundEscrowCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Beneficiary(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::BeneficiaryWithdraw(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Close(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Deposit(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::DepositsOf(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::EnableRefunds(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Owner(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::RenounceOwnership(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::State(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::TransferOwnership(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Withdraw(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::WithdrawalAllowed(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for RefundEscrowCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Beneficiary(element) => ::core::fmt::Display::fmt(element, f),
                Self::BeneficiaryWithdraw(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Close(element) => ::core::fmt::Display::fmt(element, f),
                Self::Deposit(element) => ::core::fmt::Display::fmt(element, f),
                Self::DepositsOf(element) => ::core::fmt::Display::fmt(element, f),
                Self::EnableRefunds(element) => ::core::fmt::Display::fmt(element, f),
                Self::Owner(element) => ::core::fmt::Display::fmt(element, f),
                Self::RenounceOwnership(element) => ::core::fmt::Display::fmt(element, f),
                Self::State(element) => ::core::fmt::Display::fmt(element, f),
                Self::TransferOwnership(element) => ::core::fmt::Display::fmt(element, f),
                Self::Withdraw(element) => ::core::fmt::Display::fmt(element, f),
                Self::WithdrawalAllowed(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<BeneficiaryCall> for RefundEscrowCalls {
        fn from(value: BeneficiaryCall) -> Self {
            Self::Beneficiary(value)
        }
    }
    impl ::core::convert::From<BeneficiaryWithdrawCall> for RefundEscrowCalls {
        fn from(value: BeneficiaryWithdrawCall) -> Self {
            Self::BeneficiaryWithdraw(value)
        }
    }
    impl ::core::convert::From<CloseCall> for RefundEscrowCalls {
        fn from(value: CloseCall) -> Self {
            Self::Close(value)
        }
    }
    impl ::core::convert::From<DepositCall> for RefundEscrowCalls {
        fn from(value: DepositCall) -> Self {
            Self::Deposit(value)
        }
    }
    impl ::core::convert::From<DepositsOfCall> for RefundEscrowCalls {
        fn from(value: DepositsOfCall) -> Self {
            Self::DepositsOf(value)
        }
    }
    impl ::core::convert::From<EnableRefundsCall> for RefundEscrowCalls {
        fn from(value: EnableRefundsCall) -> Self {
            Self::EnableRefunds(value)
        }
    }
    impl ::core::convert::From<OwnerCall> for RefundEscrowCalls {
        fn from(value: OwnerCall) -> Self {
            Self::Owner(value)
        }
    }
    impl ::core::convert::From<RenounceOwnershipCall> for RefundEscrowCalls {
        fn from(value: RenounceOwnershipCall) -> Self {
            Self::RenounceOwnership(value)
        }
    }
    impl ::core::convert::From<StateCall> for RefundEscrowCalls {
        fn from(value: StateCall) -> Self {
            Self::State(value)
        }
    }
    impl ::core::convert::From<TransferOwnershipCall> for RefundEscrowCalls {
        fn from(value: TransferOwnershipCall) -> Self {
            Self::TransferOwnership(value)
        }
    }
    impl ::core::convert::From<WithdrawCall> for RefundEscrowCalls {
        fn from(value: WithdrawCall) -> Self {
            Self::Withdraw(value)
        }
    }
    impl ::core::convert::From<WithdrawalAllowedCall> for RefundEscrowCalls {
        fn from(value: WithdrawalAllowedCall) -> Self {
            Self::WithdrawalAllowed(value)
        }
    }
    ///Container type for all return fields from the `beneficiary` function with signature `beneficiary()` and selector `0x38af3eed`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct BeneficiaryReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `depositsOf` function with signature `depositsOf(address)` and selector `0xe3a9db1a`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct DepositsOfReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct OwnerReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `state` function with signature `state()` and selector `0xc19d93fb`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct StateReturn(pub u8);
    ///Container type for all return fields from the `withdrawalAllowed` function with signature `withdrawalAllowed(address)` and selector `0x685ca194`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct WithdrawalAllowedReturn(pub bool);
}
